#include <iostream>
#include <string>
#include <boost/asio.hpp>
#include <boost/bind.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/enable_shared_from_this.hpp>
#include <meta.hpp>

using namespace std;
using namespace boost;
using namespace boost::asio;
using namespace boost::asio::ip;

#define VERSION "DEV"

class tcp_connection
            : public enable_shared_from_this<tcp_connection>
{
public:
    typedef shared_ptr<tcp_connection> pointer;

    static pointer create(io_service& io_service)
    {
        return pointer(new tcp_connection(io_service));
    }

    tcp::socket& socket()
    {
        return socket_;
    }

    void start()
    {
        message_ = "Hello world!";
        async_write(socket_, buffer(message_),
                                 bind(&tcp_connection::handle_write, shared_from_this(),
                                             placeholders::error,
                                             placeholders::bytes_transferred));
    }

    ~tcp_connection(){
        cout << "Connection from " << socket_.remote_endpoint().address().to_string();
        cout << ":" << socket_.remote_endpoint().port() << " terminated." << endl;
    }

private:
    tcp_connection(io_service& io_service)
            : socket_(io_service)
    {
    }

    void handle_write(const system::error_code& /*error*/,
                      size_t /*bytes_transferred*/)
    {
    }

    tcp::socket socket_;
    std::string message_;
};

class tcp_server
{
public:
    tcp_server(io_service& io_service)
            : acceptor_(io_service, tcp::endpoint(tcp::v4(), 3300))
    {
        start_accept();
    }

private:
    void start_accept()
    {
        tcp_connection::pointer new_connection =
            tcp_connection::create(acceptor_.io_service());

        acceptor_.async_accept(new_connection->socket(),
                               bind(&tcp_server::handle_accept, this, new_connection,
                                           placeholders::error));

    }

    void handle_accept(tcp_connection::pointer new_connection,
                       const system::error_code& error)
    {
        cout << "New connection from: " << new_connection->socket().remote_endpoint().address().to_string();
        cout << ":" << new_connection->socket().remote_endpoint().port() << endl;

        if (!error)
        {
            new_connection->start();
            start_accept();
        }
    }

    tcp::acceptor acceptor_;
};

int main()
{
    cout << "CrossObject Broker version: " << VERSION << endl;
    try
    {
        boost::asio::io_service io_service;
        tcp_server server(io_service);
        io_service.run();
    }
    catch (std::exception& e)
    {
        std::cerr << e.what() << std::endl;
    }

    return 0;
}
